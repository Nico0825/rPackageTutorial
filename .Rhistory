# 安装 CRAN 版的 {renv}
install.packages("renv")
# 初始化环境
renv::init()
# 保存当前所用的包环境，当然我们才刚刚开始开发，别的包都没有引入
renv::snapshot()
# 如果包为使用时必须的，则需要设置 type = "Imports"
# {renv} 在这里只是开发必备，而非使用所开发的包必备，因此选择 "Suggests" 即可
usethis::use_package(package = "renv", type = "Suggests")
# 虽然也可以使用 usethis::use_readme_md()，看个人需求（不详细讲解区别）
usethis::use_readme_rmd()
# 通过 RStudio 的 File > New File > R Script 也一样
file.create("R/add.R")
# 打开文件开始编写，写入下列内容
add<-function(a,b) {
a+b
}
# 点击 Insert Roxygen Skeleton 后就会出现文档结构
#' Title
#'
#' @param a
#' @param b
#'
#' @return
#' @export
#'
#' @examples
add<-function(a,b) {
a+b
}
#'
#' @param a Number one.
#' @param b Number two.
#'
#' @return Sum of two number.
#' @export
#'
#' @examples
#' library(rPackageTutorial)
#' add(1, 2)
add<-function(a,b) {
a+b
}
# 写完后，需要生成文档才能够真正使用
devtools::document()
library(rPackageTutorial)
?add
# 安装 {styler}
install.packages("styler")
# 对整个包进行代码美化
styler::style_pkg()
# 安装 {lintr}
install.packages("lintr")
# 对整个包进行不符合规范的代码查询（当然，都没有写多少代码，当然不会出现什么错误结果）
lintr::lint_package()
# 比如我们在 add 函数中增加一个超过80字符的注释
add <- function(a, b) {
# aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
a + b
}
# 再次执行
lintr::lint_package()
# 在 GitHub Action 中设置 lintr
usethis::use_github_action("lint")
# 设定环境
usethis::use_testthat()
# 安装 {testthat}
install.packages("testthat")
# 快速创建测试文件
> usethis::use_test()
# 快速创建测试文件
usethis::use_test()
# 快速创建测试文件
> usethis::use_test()
# 将其修改成有意义的测试
test_that("add() function return the sum of two number", {
expect_equal(add(1, 2), 3)
})
expect_equal(2 * 2, 4)
# 在自动生成的测试文件中包含了下述代码
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
# 安装 {testthat}
install.packages("testthat")
